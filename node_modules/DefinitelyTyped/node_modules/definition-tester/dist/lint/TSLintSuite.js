'use strict';
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var path = require('path');
var mc = require('manticore');
var Promise = require('bluebird');
var util = require('../util/util');
var TestResult = require('../test/TestResult');
var TestSuiteBase = require('../suite/TestSuiteBase');
var endDts = /\w\.d\.ts$/;
/////////////////////////////////
// Compile with *-tests.ts
/////////////////////////////////
var TSLintSuite = (function (_super) {
    __extends(TSLintSuite, _super);
    function TSLintSuite(options) {
        _super.call(this, options, 'Linting', 'Found some lint');
    }
    TSLintSuite.prototype.filterTargetFiles = function (files) {
        return Promise.resolve(files.filter(function (file) {
            return endDts.test(file.filePathWithName);
        }));
    };
    TSLintSuite.prototype.start = function (targetFiles, testCallback) {
        var _this = this;
        this.pool = mc.createPool({
            worker: require.resolve('./TSLintWorker'),
            concurrent: this.options.concurrent,
            paralel: 2,
            attempt: 3
        });
        return util.readJSON(this.options.tslintConfig).then(function (config) {
            _this.tslint = {
                configuration: config,
                formatter: path.resolve(_this.options.testerPath, 'dist', 'lint', 'TSLintFormatter')
            };
            return _super.prototype.start.call(_this, targetFiles, testCallback);
        });
    };
    TSLintSuite.prototype.runTest = function (targetFile) {
        var _this = this;
        return this.pool.run('lint', {
            filePath: targetFile.fullPath,
            options: this.tslint
        }).then(function (res) {
            var testResult = new TestResult();
            testResult.hostedBy = _this;
            testResult.targetFile = targetFile;
            if (!res) {
                testResult.stderr = 'bad result for ' + targetFile.filePathWithName;
                testResult.exitCode = 1;
            }
            else if (res.failureCount > 0 && res.output) {
                testResult.stderr = res.output;
                testResult.exitCode = 1;
            }
            _this.testResults.push(testResult);
            // convert to our promise type
            return Promise.resolve(testResult);
        });
    };
    return TSLintSuite;
})(TestSuiteBase);
module.exports = TSLintSuite;
